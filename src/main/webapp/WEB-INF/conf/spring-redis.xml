<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!--配置数据源属性文件 -->
    <bean id="propertyConfigurer" class="com.huawei.taskManager.utils.PropertiesLoader">
        <property name="locations">
            <list>
                <value>/WEB-INF/redis.properties</value>
                <!--  value>classpath:config.properties</value>-->
            </list>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
        <property name="ignoreUnresolvablePlaceholders">
            <value>true</value>
        </property>
    </bean>



    <!--redis 缓存-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="300"></property>
        <property name="maxIdle" value="20"></property>
        <property name="minIdle" value="2"></property>
        <property name="maxWaitMillis" value="500"></property>
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <property name="numTestsPerEvictionRun" value="3"></property>
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <property name="testOnBorrow" value="true"></property>
        <property name="testOnReturn" value="true"></property>
        <property name="testWhileIdle" value="true"></property>
    </bean>

    <bean id ="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.port}" />
        <constructor-arg name="password" value="${redis.pwd}" />
        <constructor-arg name="timeout" value="500" />
        <constructor-arg name="database" value="0" />
    </bean>




    <!---->
    <!--<bean id="jedisConnectionFactory"-->
          <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"-->
          <!--destroy-method="destroy">-->
        <!--<property name="hostName" value="${redis.host}" />-->
        <!--<property name="port" value="${redis.port}" />-->
        <!--<property name="timeout" value="500" />-->
        <!--<property name="database" value="0" />-->
        <!--<property name="password" value="${redis.pwd}" />-->
        <!--<property name="usePool" value="true" />-->
        <!--<property name="poolConfig" ref="jedisPoolConfig" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; redis template definition p表示对该bean里面的属性进行注入,格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 &ndash;&gt;-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"-->
          <!--p:connection-factory-ref="jedisConnectionFactory">-->
        <!--&lt;!&ndash; 序列化方式 建议key/hashKey采用StringRedisSerializer。 &ndash;&gt;-->
        <!--<property name="keySerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
        <!--</property>-->

    <!--</bean>-->
    <!--&lt;!&ndash; 对string操作的封装 &ndash;&gt;-->
    <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"-->
          <!--p:connection-factory-ref="jedisConnectionFactory" />-->

</beans>